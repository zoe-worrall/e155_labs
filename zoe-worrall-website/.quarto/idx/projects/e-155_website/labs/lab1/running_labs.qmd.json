{"title":"How to Run FPGA Code","markdown":{"yaml":{"title":"How to Run FPGA Code","format":{"html":{"other-links":[{"text":"Return to Lab 1 Page","href":"lab1.html"}]}}},"headingText":"First Steps","containsRefs":false,"markdown":"\n\n\nThe first thing that you need to do is write your code. Easy enough; let's pretend that you've done that already.\n\nI follow [Professor Brake's tutorial](https://hmc-e155.github.io/tutorials/lattice-radiant-installation/index.html) for most of this, and it was quite comprehensive. However, if you'd like even more photos, and specifically information on how I personally load onto my FPGA board, read on.\nThe next thing that you need to do is a bit more difficult if you aren't connected to your board properly, and that's to Synthesize your code, like the pretty image below.\n\n![](images/Synthesize_Windows.png){width=40% fig-align=\"center\"}\n\nStart by installing Lattice Radiant. It's straightforward, especially if you are following Professor Brake's tutorial. I will talk specifically about installing the FTDI driver afterwards, as that was what was more difficult on my end.\n\nUnfortunately, unless you've done it before you'll probably need to install the FTDI Drivers that Professor Brake mentions. I'll give you a tip, though, that you shouldn't just go blindly clicking and installing every zip file that you see -- for example, clicking the linke for \"setup executable\" will give a file that is meant for Windows computers (x86), not for your arm64 chip. Here are the proper steps:\n\n1. Read through [the Installation Guide](https://ftdichip.com/document/installation-guides/) for your situation. If you are like me, and are running a Windows Driver on your Mac, then use [this Installation Guide](https://ftdichip.com/wp-content/uploads/2023/11/AN_396_FTDI_Drivers_Installation_Guide_for_Windows_10_11.pdf). If you are even more like me, and you're on a Mac with an M1 chip, you should carefully read and then ignore all of Sections 3.1 and 3.2 in this guide, and focuse solely on Section 3.3. As the document says, \"Note: This is the only method to install the ARM64 or universal versions of the driver.\".\n\n2. The rest of this process is quite straight forward, so long as you follow Section 3.3. The process will mainly be that you will first need to link your device into Parallels so that you can see it from inside the Parallels Device.\n\n![](images/Connect_To_USB_Windows.png){width=40% fig-align=\"center\"}\n\n3. You will then be told that you should be able to open Device Manager within Windows (just use the search bar at the bottom to find it) and immediately see the relevant Ports. If you are like me, you don't see this and panic. Don't worry: it's just hidden from you because it's currently broken. To rectify this, you need to click `View > show hidden devices` inside your Device Manager. Miraculously, you will suddenly see the same `Ports` file that they are talking about in the installation guide.\n\n![](images/Show_Hidden_Windows.png){width=40% fig-align=\"center\"}\n\n4. Continue following their recommended steps. Note that when you install the FTDI driver, you should install it **on the Parallels Window Machine and not on your home Mac**, as this will cause errors when the program tries finding it (at least, it did for me).\n\n\n## Kavi's Code\n*This has been posted with Kavi's permission*\n\nKavi was tired of needing to hunt down the .bin file every time. Kavi is also really good at writing shell code. Resultantly, Kavi wrote the following code which will find the binary file that you need, so long as you are in the proper folder for it.\n\nIn order to install this shortcut, first you need to open your .zshrc file. For those of you who are extremely unfamiliar with terminal code, follow the following steps.\n\n1. In your terminal, type `vim ~/.zshrc`. This does two things; vim is a way of opening and editing a current configuration code (or any code file) from within terminal. ~/.zshrc is one of what are called \"shell\" code files. The ~/ indicates that the path to this file is from your current user's home file. The \".zshrc\" file itself is hidden; if you run `ls` in your home directory, you'll note that it doesn't appear; you can only see it if you list files including hidden ones (`ls -a`). It is what is run when your computer starts up, and helps point your computer on where to go. It is also where you can write shortcuts for running commands within terminal, which is what we are about to do. Below is an image of what my ~/.zshrc program looks like.\n\n![](images/Entering_zshrc_Windows.png){width=40% fig-align=\"center\"}\n\n2. You'll note that when you have this file open using vim, you can't type anything. In order to actually insert things into this file, **you need to type the letter `i`**. This will put you into \"Insert\" mode, indicated by the `-- INSERT --` on the bottom of your screen. You can now type in this folder! But be careful; deleting things or entering random things will likely throw errors in your terminal, which are often gross and icky to clean up.\n\n![](images/InsertMode_Windows.png){width=40% fig-align=\"center\"}\n\n3. Now that you're in Insert mode, navigate to the bottom of this file (just press/hold down on the down arrows until you get there). Paste the following code.\n```\n#!/bin/bash\nalias program_fpga=\"find . -name '*.bin' -print | xargs openFPGALoader -b ice40_generic -c ft232  -f\"\n```\nWhat this effectively does is locates the bin file (assuming that you've only made one -- please don't add more than one bin file or random, weird behavior will happen and the code likely won't run), and then enters this into the openFPGALoader program. If you're unfamiliar with terminal, you'll notice that there's a line (called a pipe) `|` in the middle of the code; this indicates that after you've found the *.bin file, you push the output into the next code; in this case, its being used as an argument (xargs) in openFPGA viewer.\n\n4. Now that you've inserted it, a problem that I first had when I was learning how to use vim was how to get out of it (vim is one of many ways to edit this programs, by the way: some people prefer using vi, or something else they've downloaded off of the interwebs. It's really up to you how you edit files in terminal -- I'm just most familiar with vim). To leave, and especially to save what you just did, **use the `Esc` key**. If you've decide that **you don't want to save your work, write `:q!` in the terminal and press Enter**. This effectively quits the program without saving. If you **DO** want to save, instead you need to **write `:wq`, which will save the edits that you've made to your ~/.zshrc file**. You've now saved Kavi's code, and if you want to run it, all you need to write in your terminal is `program_fpga`. \n\n::: {.callout-note title=\"Double Check\"} \n\nP.S. If you'd like to check that your changes were made inside of the program, you can experiment with that new pipe character you've just learned about to make sure that the file is in there. In your terminal, type `cat ~/.zshrc | grep program_fpga`. What this effectively does is:\n\n1. Uses `cat` to return all the text inside your ~/.zshrc file\n2. Pipelines this text and selectively sorts it, using `grep`, for the keyword \"program_fpga\", which is the function we've just added.\n\nIf all went well, you should see the line `alias program_fpga=\"find . -name '*.bin' -print | xargs openFPGALoader -b ice40_generic -c ft232  -f\"` returned! If nothing is returned, that means it wasn't saved properly, and you'll need to go back and make sure that it's there and that there are no typos.\n\n::: \n\n## Running FPGA Code\n\nThe first step you need to take to running code off your FPGA board is locating where the folder containing this code is on your computer. Here is an example of how I find mine.\n\n1. I go to my Finder window, and go into `Locations`. This is where I can see Parallels's virtual Windows environment.\n\n![](images/Locations_Windows.png){width=40% fig-align=\"center\"}\n\n2. I then navigate to wherever I've saved my file. Note that it is also possible to save  your file on your Mac, and upload it to your FPGA from there. For me, I had difficulties connecting to my FPGA whenever I was on my Mac besides when I was using the terminal, and so I chose to avoid some frustration by storing all my files solely on Parallels.\n\n![](images/Navigation_Windows.png){width=40% fig-align=\"center\"}\n\n3. By dragging the folder for your lab into terminal, you can enter this path within your terminal in order to run your FGPA, Lattice Radiant code.\n\n![](images/DragNDrop_Windows.png){width=40% fig-align=\"center\"}\n\n4. Now that you are inside the program, you can run Kavi's Code. Type `program_fpga`, and if you are connected to your board correctly (make sure that you have the microUSB plugged into the FPGA and that the lights are turned on), the code that you have Synthesized will automatically upload onto the FPGA, and you'll see it running in real time. To double check and confirm, your terminal should resemble the image below (potentially without the colors)\n\n![](images/Running_As_Intended_Windows.png)\n\n## Done!\n\nAnd that's it! Congratulations, you're now able to run code from your FPGA board!","srcMarkdownNoYaml":"\n\n## First Steps\n\nThe first thing that you need to do is write your code. Easy enough; let's pretend that you've done that already.\n\nI follow [Professor Brake's tutorial](https://hmc-e155.github.io/tutorials/lattice-radiant-installation/index.html) for most of this, and it was quite comprehensive. However, if you'd like even more photos, and specifically information on how I personally load onto my FPGA board, read on.\nThe next thing that you need to do is a bit more difficult if you aren't connected to your board properly, and that's to Synthesize your code, like the pretty image below.\n\n![](images/Synthesize_Windows.png){width=40% fig-align=\"center\"}\n\nStart by installing Lattice Radiant. It's straightforward, especially if you are following Professor Brake's tutorial. I will talk specifically about installing the FTDI driver afterwards, as that was what was more difficult on my end.\n\nUnfortunately, unless you've done it before you'll probably need to install the FTDI Drivers that Professor Brake mentions. I'll give you a tip, though, that you shouldn't just go blindly clicking and installing every zip file that you see -- for example, clicking the linke for \"setup executable\" will give a file that is meant for Windows computers (x86), not for your arm64 chip. Here are the proper steps:\n\n1. Read through [the Installation Guide](https://ftdichip.com/document/installation-guides/) for your situation. If you are like me, and are running a Windows Driver on your Mac, then use [this Installation Guide](https://ftdichip.com/wp-content/uploads/2023/11/AN_396_FTDI_Drivers_Installation_Guide_for_Windows_10_11.pdf). If you are even more like me, and you're on a Mac with an M1 chip, you should carefully read and then ignore all of Sections 3.1 and 3.2 in this guide, and focuse solely on Section 3.3. As the document says, \"Note: This is the only method to install the ARM64 or universal versions of the driver.\".\n\n2. The rest of this process is quite straight forward, so long as you follow Section 3.3. The process will mainly be that you will first need to link your device into Parallels so that you can see it from inside the Parallels Device.\n\n![](images/Connect_To_USB_Windows.png){width=40% fig-align=\"center\"}\n\n3. You will then be told that you should be able to open Device Manager within Windows (just use the search bar at the bottom to find it) and immediately see the relevant Ports. If you are like me, you don't see this and panic. Don't worry: it's just hidden from you because it's currently broken. To rectify this, you need to click `View > show hidden devices` inside your Device Manager. Miraculously, you will suddenly see the same `Ports` file that they are talking about in the installation guide.\n\n![](images/Show_Hidden_Windows.png){width=40% fig-align=\"center\"}\n\n4. Continue following their recommended steps. Note that when you install the FTDI driver, you should install it **on the Parallels Window Machine and not on your home Mac**, as this will cause errors when the program tries finding it (at least, it did for me).\n\n\n## Kavi's Code\n*This has been posted with Kavi's permission*\n\nKavi was tired of needing to hunt down the .bin file every time. Kavi is also really good at writing shell code. Resultantly, Kavi wrote the following code which will find the binary file that you need, so long as you are in the proper folder for it.\n\nIn order to install this shortcut, first you need to open your .zshrc file. For those of you who are extremely unfamiliar with terminal code, follow the following steps.\n\n1. In your terminal, type `vim ~/.zshrc`. This does two things; vim is a way of opening and editing a current configuration code (or any code file) from within terminal. ~/.zshrc is one of what are called \"shell\" code files. The ~/ indicates that the path to this file is from your current user's home file. The \".zshrc\" file itself is hidden; if you run `ls` in your home directory, you'll note that it doesn't appear; you can only see it if you list files including hidden ones (`ls -a`). It is what is run when your computer starts up, and helps point your computer on where to go. It is also where you can write shortcuts for running commands within terminal, which is what we are about to do. Below is an image of what my ~/.zshrc program looks like.\n\n![](images/Entering_zshrc_Windows.png){width=40% fig-align=\"center\"}\n\n2. You'll note that when you have this file open using vim, you can't type anything. In order to actually insert things into this file, **you need to type the letter `i`**. This will put you into \"Insert\" mode, indicated by the `-- INSERT --` on the bottom of your screen. You can now type in this folder! But be careful; deleting things or entering random things will likely throw errors in your terminal, which are often gross and icky to clean up.\n\n![](images/InsertMode_Windows.png){width=40% fig-align=\"center\"}\n\n3. Now that you're in Insert mode, navigate to the bottom of this file (just press/hold down on the down arrows until you get there). Paste the following code.\n```\n#!/bin/bash\nalias program_fpga=\"find . -name '*.bin' -print | xargs openFPGALoader -b ice40_generic -c ft232  -f\"\n```\nWhat this effectively does is locates the bin file (assuming that you've only made one -- please don't add more than one bin file or random, weird behavior will happen and the code likely won't run), and then enters this into the openFPGALoader program. If you're unfamiliar with terminal, you'll notice that there's a line (called a pipe) `|` in the middle of the code; this indicates that after you've found the *.bin file, you push the output into the next code; in this case, its being used as an argument (xargs) in openFPGA viewer.\n\n4. Now that you've inserted it, a problem that I first had when I was learning how to use vim was how to get out of it (vim is one of many ways to edit this programs, by the way: some people prefer using vi, or something else they've downloaded off of the interwebs. It's really up to you how you edit files in terminal -- I'm just most familiar with vim). To leave, and especially to save what you just did, **use the `Esc` key**. If you've decide that **you don't want to save your work, write `:q!` in the terminal and press Enter**. This effectively quits the program without saving. If you **DO** want to save, instead you need to **write `:wq`, which will save the edits that you've made to your ~/.zshrc file**. You've now saved Kavi's code, and if you want to run it, all you need to write in your terminal is `program_fpga`. \n\n::: {.callout-note title=\"Double Check\"} \n\nP.S. If you'd like to check that your changes were made inside of the program, you can experiment with that new pipe character you've just learned about to make sure that the file is in there. In your terminal, type `cat ~/.zshrc | grep program_fpga`. What this effectively does is:\n\n1. Uses `cat` to return all the text inside your ~/.zshrc file\n2. Pipelines this text and selectively sorts it, using `grep`, for the keyword \"program_fpga\", which is the function we've just added.\n\nIf all went well, you should see the line `alias program_fpga=\"find . -name '*.bin' -print | xargs openFPGALoader -b ice40_generic -c ft232  -f\"` returned! If nothing is returned, that means it wasn't saved properly, and you'll need to go back and make sure that it's there and that there are no typos.\n\n::: \n\n## Running FPGA Code\n\nThe first step you need to take to running code off your FPGA board is locating where the folder containing this code is on your computer. Here is an example of how I find mine.\n\n1. I go to my Finder window, and go into `Locations`. This is where I can see Parallels's virtual Windows environment.\n\n![](images/Locations_Windows.png){width=40% fig-align=\"center\"}\n\n2. I then navigate to wherever I've saved my file. Note that it is also possible to save  your file on your Mac, and upload it to your FPGA from there. For me, I had difficulties connecting to my FPGA whenever I was on my Mac besides when I was using the terminal, and so I chose to avoid some frustration by storing all my files solely on Parallels.\n\n![](images/Navigation_Windows.png){width=40% fig-align=\"center\"}\n\n3. By dragging the folder for your lab into terminal, you can enter this path within your terminal in order to run your FGPA, Lattice Radiant code.\n\n![](images/DragNDrop_Windows.png){width=40% fig-align=\"center\"}\n\n4. Now that you are inside the program, you can run Kavi's Code. Type `program_fpga`, and if you are connected to your board correctly (make sure that you have the microUSB plugged into the FPGA and that the lights are turned on), the code that you have Synthesized will automatically upload onto the FPGA, and you'll see it running in real time. To double check and confirm, your terminal should resemble the image below (potentially without the colors)\n\n![](images/Running_As_Intended_Windows.png)\n\n## Done!\n\nAnd that's it! Congratulations, you're now able to run code from your FPGA board!"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"running_labs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.45","theme":"jolla","font-family":"Times New Roman","smooth-scroll":true,"grid":{"sidebar-width":"0px","body-width":"1000px","margin-width":"250px"},"title":"How to Run FPGA Code","other-links":[{"text":"Return to Lab 1 Page","href":"lab1.html"}]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}