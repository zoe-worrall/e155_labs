{"title":"Lab 2 Writeup","markdown":{"yaml":{"title":"Lab 2 Writeup","author":"Zoe Worrall  - zworrall@g.hmc.edu","image":"images/lab2_sim.png","date":"September 9, 2024","format":{"html":{"other-links":[{"text":"E155 FA Development Board","href":"https://pages.hmc.edu/brake/class/e155/fa23/assets/doc/E155%20Development%20Board%20Schematic.pdf"},{"text":"E155 Breadboard Adapter v4","href":"https://hmc-e155.github.io/assets/doc/E155%20Breadboard%20Adapter%20Schematic.pdf"},{"text":"Lab 2 Github Files","href":"https://github.com/zoe-worrall/e155_labs/tree/main/fpga/radiant_project/lab02"},{"text":"PNP Transistor Datasheet","href":"https://hmc-e155.github.io/assets/doc/2N3906-D.pdf"}]}},"categories":["labreport"]},"headingText":"Lab 2: Multiplexed 7-Segment Display","containsRefs":false,"markdown":"\n\n*Hours Spent: 13.5, Mapped with Toggl Track*\n\n### Introduction\n\nIn this lab, a design was developed to display the output of two 4-pin DIP Switches on a dual seven segmenet LED matrix, such that each four-pin switch was mapped to one display. The sum of these two values was then displayed on a set of five LEDs. The dual seven segment display is lit up using the same function as in [Lab 1](/portfolio_git_repo/zoe-worrall-website/projects/e-155_website/labs/lab1). Resultantly, it was necessary to multiplex the dual segment such that only one common anode was powered at a time. In addition, due to the current draw required on the display, the +3.3V regulator on the E155 Board was used to power the seven segment display (with the assumption that a computer would be able to supply the required amount of current). In addition, to prevent the current from flowing directly through the FPGA, the common anode was turned on and off using a PNP transistor setup. The LED display needed to be breadboarded, as well, because there are only a total of 4 FPGA-controllable LEDs onboard the development board. A 10-LED display was used to show the sum of each of the bits for this program.\n\n### Design: Modules and Testbenches\n\n#### Modules\nFrom the top layer down, it was understood that there would be the blocks displayed in the diagram depicted below.\n\n![Block Diagram of Modules](images/lab2_block.png){#fig-block_diag width=100% fig-align=\"center\"}\n\nWhen encoded, the lab resultantly consisted of the above modules. They are explained in the table (@tbl-modules) below.\n\n| Module Name | Module Function  |\n|-------------|------------------|\n| **`top.sv`**| Puts together lab2. Generates a clock that will run the program, and outputs variables to the necessary pins. |\n| **`lab02.sv`** | Runs an always_ff block to determine the current state and the next state of the system. Runs combinational logic blocks of dual_seven_segment and led_summation for required seven segment and led logic |\n| **`dual_seven_seg.sv`**  | Calls on the seven segment block from Lab 1. According to the clock's counter, half the time will return seven segment for one switch, and half the time will return the seven seg output for the other |\n| **`seven_segment.sv`** | Uses combinational logic to determine which seven segment cathodes to turn on, and which to turn off. |\n| **`led_summation.sv`** | Adds together the collected 4-bits of the two switches and returns their binary equivalent as a 5-bit array |\n\n: **Module Functions** {#tbl-modules}\n\nSome important notes about this layout is that the clock is used to determine a state, S0 or S1, which will determine which display is turned on at any given time. In state **S0**, the system would rely on one switch (s1); in this case, `seven_segment` would be called on for that switch only. The system would then turn a corresponding anode on and off using the PNP resister; in this case, since its a PNP resistor, it needed to be turn \"off\" to turn the system on. In state **S1**, the output of `seven_segment` instead relies on the output of switch s2, and will return the opposite output for the anode display. The logic for this can be found in @tbl-statelogic, the following can be said for each of the states.\n\n\n| state | Switch Used for Seven Segment Logic | Anode 1 | Anode 2 | \n|-------|-------------------------------------|---------|---------|\n| **S0** | s1 | 0 (i.e. Display 1 is on) | 1 (Display 2 is off) |\n| **S1** | s2 | 1 | 0 |\n| **X**  | an error has occured, s = 0 | 1 | 1 |\n\n: **State Logic** {#tbl-statelogic}\n\nOnce these modules were all written, they were compiled, checked for errors, and finally put into Questa for testing.\n\n#### Testing\n\nTwo test benches were written for this lab. The first one checks to make sure that `lab02.sv` as a whole can run, and correctly lights up the LEDs as seen fit. Because direct control of the counter can't be gotten when calling on this upper-level module, the testbench instead only checked that at least one of the outputs of the potential seven segment outputs was correct. The second was used to determine that the proper segment was lit up when the correct switch/state was entered into the dual_seven_seg module. In the case of both, a testvector file was composed and assembled using Python to make sure that all possible options were checked for and confirmed. This Python program can be found in Github, at [`this_file.py`](https://github.com/zoe-worrall/e155_labs/blob/main/this_file.py)\n\n##### Testbench lab02_tb\n\nIn order to make sure that all cases were covered, the test vectors were created by running a for-loop to generate a series of switches; each of these switch combinations was used to generate a potential segment output, and finally a summation-vector was made that could be called on to correctly add the sum of both segments to the end. The python file then printed a series of strings of the form\n\n`switch1_switch2_segment1_segment2_summed led values`\n\nBy running two for loops to cycle through all potential switch values, it can be confirmed that all potential values within the system have been reached. Within the test bench itself, the system uses an or expression to confirm that at least one of the segment outputs is equal to the segment output of the system. It also confirms that the led_summation is working as anticipated.\n\nUsing this testbench, confirmation of the functionality of the whole of lab02 was completed, as all tests could be run without failure (@fig-testbenchlab02)\n\n![Output of Running lab02_tb.sv in Questa](images/lab2_QuestaOutLab02.png){#fig-testbenchlab02 width=50%}\n\n\n##### Testbench dual_seven_seg_tb\n\nIn order to make sure that all cases were covered, the test vectors for this testbench were created by running a for-loop to generate a series of switches, similar to lab02 testbench. However, these nested for-loops were nested in one final for-loop, which acertained which state the system was in; each of these switch combinations was used to generate a potential segment output, and finally a summation-vector was made that could be called on to correctly add the sum of both segments to the end. The python file then printed a series of strings of the form\n\n`switch1_switch2_state_segment_anode1_anode2`\n\nBy running two for loops to cycle through all potential switch values, it can be confirmed that all potential values within the system have been reached. Within the test bench itself, the system uses an or expression to confirm that at least one of the segment outputs is equal to the segment output of the system. It also confirms that the led_summation is working as anticipated.\n\nUsing this testbench, confirmation of the functionality of the whole of lab02 was completed, as all tests could be run without failure (@fig-testbenchMultiplex)\n\n![Output of Running lab02_tb.sv in Questa](images/lab2_QuestaOutSevenSegTb.png){#fig-testbenchMultiplex width=50%}\n\nWith this confirmation that the logic of the modules were working, it was possible to then move on to physical implementation of the program on the actual FPGA and hardware.\n\n### Design: Seven Segment Display\n\nThe design was developed based on work from Lab 1. The same seven segmenet module was used within a double multiplexer, which used the clock to switch back and forth between powering the two common anodes of the dual display. Using multiplexing, the two values were displayed.\n\nBecause the final system was multiplexing between two segments, this means that the common anode of a given seven-segment LED must be able to be turned OFF. In the original design for the seven-segment display, the common anode had been plugged in directly to the +3.3V of the development board, and in this way circumvented being powered by the FPGA board (which can not supply more than 0.8 mA at a given time). Attempting to power the seven-segment display directly won't work (as will be explained in @sec-calculations) unless you want to short your board. Resultantly, two PNP 2N3906 transistors were used, wherein the FPGA was used only to turn the transistor on and off, allowing the +3.3V coming from the Development board to flow within the circuit (once again, circumventing using the FPGA as a current supply directly).\n\n#### Calculations: PNP Transistor Circuit{#sec-calculations}\nBeforehand, to ensure proper requisites were met for powering the seven segment display that everything was properly set up for the PNP transistor and the resistors in the circuit, some simple mathematial calculations were performed to ensure proper voltage and current was kept throughout the circuit.\n\nThe transistors we were using were [2N3906 PNP transistors](https://hmc-e155.github.io/assets/doc/2N3906-D.pdf). PNP transistors have three terminals; the base, which controls if the PNP is on or off, the emitter, where electrons come from, and the collector, where the electrons go (@fig-pnptransis). For PNP transistors to work, there must be enough of a voltage gap between the base voltage and the emitter voltage that current can flow from one too the other; when this happens, current can also flow from the emitter to the collector, with the assumption that the voltages being used do not break or short out the transistor itself.\n\n![PNP Transistor Diagram](images/pnp_transistor.png){#fig-pnptransis width=40%}\n\nTo determine these limitations, it was necessary to know three things: the voltage drop across the collector to the emitter (V_CE), the voltage drop across the base to the emitter (V_BE), and finally the maximum current draw that would flow from the collector to the emitter (I_CE).\n\nAccording to the PNP's datasheet, on average the V_CE drop is 3.3 V. The value of V_BE is, as with most transistors, assumed to be about 0.7 V. To start out with, the primary goal of this circuit should be to power the FPGA board without shorting it by sending too much current through it via the emitter to base connection on the board. Resultantly, a resistor should be placed between the FPGA's output GPIO pin and the base of the transistor such that the current is less than the maximum possible current that can be sent into the board. This can be configured according to the datatable for the GPIO pins (@fig-fpga_gpio_pins), where it can be seen that the maximum current that should be sent into or out of the FPGA board is 0.8 mA. The maximum current we will be sending into our board is based on the resistor values that we install for the diodes with the dual segment display. With the assumption that we use the same 220 Ohm resistors we were originally using, the current draw through each of these resistors will be slightly reduced from what was considered in Lab 1.\n\n![GPIO Current Draw Pins for FPGA Board](images/fpga_maxin_maxout.png){#fig-fpga_gpio_pins width=100%}\n\nFirst and foremost, I intend to power the LED's using 3.3V, but these volts will first travel across the transistor, which is dependent on the current I_C traveling through the circuit. Assuming that this is relatively negligable (see Figure 15 on the PNP Datasheet, to observe that most of the Voltage removed for current lying under 60 mA is close to 0.1 V), and knowing that per diode line there will be an anticipated voltage drop of 2.1 V, that means that any one resistor will need to remove 3.3 - 2.1 Volts, or 1.2 V, from the circuit. When traveling across a 220 Ohm resistor, this will result in a current of roughly 5.45 mA. Assuming that we'll be powering seven segments at any one time (the maximum amount possible), this means that the total current draw that can be expected is 38.18 mA. We can then compute the necessary amount of current, I_B, that will need to travel through the base in order to turn this circuit on. Using the gain terms found in the datasheet (@fig-gaincurrent), it can be seen that for a given current I_C = 40 mA, the gain will be roughly 50 around room temperature. \n\n![Table of the Voltage Drop V_CE and Gain of PNP Transistor](images/pnp_gain.png){#fig-gaincurrent width=100%}\n\nThis means that the corresponding current I_B for the circuit is 38.18 mA/50 = 0.69 mA. In the case of I_B, there is only one resistor between it and the +3.3V power supply; in addition, the transistor will remove V_BE from the circuit, which means that the resistence of this component must be roughly (3.3V - 0.7V)/(0.69 mA), or 3.745 kOhms. In my final circuit design, I used a 3.3 kOhm resistor as it was the closest one I could find in lab, meaning that the final current draw was likely 0.07 mA, which still falls far under the maximum current that the FPGA board can use.\n\n@tbl-fin_calc below shows all the calculated voltages, currents, and resistances used for this circuit.\n\n| Component/Measurement | Calculated Value |\n|-----------------------|------------------|\n| V_CE (voltage from Emitter to Collector)    | 3.3 V    |\n| V_BE (voltage drop from Base to Emitter)    | 0.7 V    |\n| I_C (anticipated current drawn from the emitter to the collector)    | 38.18 mA   |\n| h_FE (DC gain relative to current I_C)    | 55   |\n| I_B (current necessary to turn on the PNP transistor)    | 0.69 mA   |\n| R_transistor (current-limiting resistor between the FPGA and the emitter)    | 3.745 kOhms    |\n\n: **Calculated Component Values** {#tbl-fin_calc}\n\n#### Hardware Setup of Seven Segment Display\n\nSimilar to the [previous Lab](/portfolio_git_repo/zoe-worrall-website/projects/e-155_website/labs/lab1), in this lab each individual seven segment display was connected to a common anode (in this case, the output emitter of a PNP transistor). Each of the cathodes was attached via a resistor to the FPGA output pins onboard the [E155 Breadboard Adapter](https://hmc-e155.github.io/assets/doc/E155%20Breadboard%20Adapter%20Schematic.pdf). In similar fashion to what was described in Lab 1, setting the board up such that each cathode has a resistor allows for each of the diodes to be equally bright, as they all start at the same voltage drop and resultantly will draw the same current if powered (current being directly correlated with their lumosity).\n\nThe pin numbers, besides pin D, were kept the same as Lab 1 (it was later realized that the print of Pin 18 looks extremely similar to Pin 10, and that was why the system wasn't working when Pin 10 was being powered; the system now works where Pin D is assigned to Pin 18). There are only three fundamental differences: two common anodes, two sets of A-G pins, and the presence of transistors within the circuit.\n\n##### Common Anodes\n\nThe dual display had two common anodes, which were how control over multiplexing was done. At any one time, there were two \"states\" assumed to exist within the system; in one state, the display on the right was turned on (S0), and in the other, the display on the left (S1)\n\n##### Two Sets of Pins\n\nSince only a single module calculating the seven-segmenet display could be used at any one time, the corresponding pins of each cathode were connected to each other (i.e. A1 was connected to A2, B1 to B2, etc.). This meant that if both the common anodes had been lit up at the same time, both displays would show the same value, rather than only one lighting up.\n\n##### Transistors\n\nThe common anodes were controlled via the PNP transistors. In doing so, it was possible to only light up one display at a time, while only performing one calculation of the seven segment display.\n\nThe final schematic of this system can be seen in @fig-sevenSegSchem\n\n![Dual Seven Segment LED Matrix Schematic](images/lab2_scheme_sevenseg.png){#fig-sevenSegSchem width=100%}\n\n### Design: DIP Switch Pins\n\nThere are two DIP switches used in this lab, one that is breadboarded and controls the output of the rightmost display, and one that is soldered onto the E155 board and is used the left-most display. The same logic as the previous labs applies to both DIP switches, where the rightmost pin is used as the lowest-order bit. The on-board DIP switches did not require any additional resistrs, as there is an integrated pull-up resistor as detailed on the [\"E155 FA Development Board Datasheet\"](https://pages.hmc.edu/brake/class/e155/fa23/assets/doc/E155%20Development%20Board%20Schematic.pdf). However, the readboarded switches did not have these pull-up resistors already; after reviewing the [78B04ST DIP switch datasheet](https://peerlesselectronics.com/media//erp_files/files/78B04ST.pdf), it was found that the switches work at 3.3V, so no voltage adjustment was necessary. However, four additional 220 Ohm resistors were added to the switch board between the switch and ground to create a pull-up resistor, and then four FPGA GPIO pins were connected into the anodes of each DIP switch. The final connections for these connections, as well as the variables to which they were assigned can be found in @fig-switches\n\n![4-Pin DIP Switch Schematic](images/lab2_scheme_switches.png){#fig-switches width=100%}\n\n#### Design: LED Counter\n\nThe final necessity for this lab is a set of five LEDs to display the binary summation of the two switches. For this project, a [SSA-LXB10TW-GF-LP](https://www.mouser.com/ProductDetail/Lumex/SSA-LXB10IW-GF-LP?qs=52yRZiL3nOrtt4bQY8D69g%3D%3D) was used. Since the LED's require a 2.1 voltage drop across them, very similar to the LEDs inside the seven segment array, 220 Ohm resistors were used for each LED while they drained to ground. This resulted in the corresponding schematic (@fig-leds). Only 5 of the 10 LED-Diode Display were used.\n\n![10-LED Display Schematic](images/lab2_scheme_leds.png){#fig-leds width=100%}\n\n#### Design: Overall\n\nThe final circuit is mainly controlled by the FPGA, except for the 3.3V that supplies the current for the seven segment voltage. The final circuit can be seen in @fig-schematic.\n\n![Overall Schematic](images/lab2_schematic.png){#fig-schematic width=100%}\n\n### Results and Discussion\n\nAs shown in the two test bench simulations above, the program is able to receive the desired outputs. When observed in the lab, with hardware, the correct behavior can be similarly observed.\n\nIf future development desired, additional phases or multiplexed digits could be added quite easily, especially if scaled by 2, as the multiplexing is controlled by each digit of counter; hypothetically, if an additional two numbers needed to be added, two more switches could be set up on the breadboard in similar fashion, the counter could be assigned based on the state of two bits within counter (for a total of four states, rather than two), and the multiplexing would occur via four PNP transistors that move to four common anodes. Scaling is extremely possible with this design.\n\n### Conclusion\n\nIn conclusion, all of the program works properly in simulation and in hardware, and can be confirmed both visually and with the aid of a test bench. The program is able to multiplex successfully without having the two LEDs bleed over, and all digits are equally lit for each segment, and proper calculations for the PNP transistor can be found above.\n\nI spent a total of 13.5 hours working on this lab, with roughly four of them spent on the lab writeup if including the planning of the modules and compiling all of the necessary diagrams.","srcMarkdownNoYaml":"\n\n## Lab 2: Multiplexed 7-Segment Display\n*Hours Spent: 13.5, Mapped with Toggl Track*\n\n### Introduction\n\nIn this lab, a design was developed to display the output of two 4-pin DIP Switches on a dual seven segmenet LED matrix, such that each four-pin switch was mapped to one display. The sum of these two values was then displayed on a set of five LEDs. The dual seven segment display is lit up using the same function as in [Lab 1](/portfolio_git_repo/zoe-worrall-website/projects/e-155_website/labs/lab1). Resultantly, it was necessary to multiplex the dual segment such that only one common anode was powered at a time. In addition, due to the current draw required on the display, the +3.3V regulator on the E155 Board was used to power the seven segment display (with the assumption that a computer would be able to supply the required amount of current). In addition, to prevent the current from flowing directly through the FPGA, the common anode was turned on and off using a PNP transistor setup. The LED display needed to be breadboarded, as well, because there are only a total of 4 FPGA-controllable LEDs onboard the development board. A 10-LED display was used to show the sum of each of the bits for this program.\n\n### Design: Modules and Testbenches\n\n#### Modules\nFrom the top layer down, it was understood that there would be the blocks displayed in the diagram depicted below.\n\n![Block Diagram of Modules](images/lab2_block.png){#fig-block_diag width=100% fig-align=\"center\"}\n\nWhen encoded, the lab resultantly consisted of the above modules. They are explained in the table (@tbl-modules) below.\n\n| Module Name | Module Function  |\n|-------------|------------------|\n| **`top.sv`**| Puts together lab2. Generates a clock that will run the program, and outputs variables to the necessary pins. |\n| **`lab02.sv`** | Runs an always_ff block to determine the current state and the next state of the system. Runs combinational logic blocks of dual_seven_segment and led_summation for required seven segment and led logic |\n| **`dual_seven_seg.sv`**  | Calls on the seven segment block from Lab 1. According to the clock's counter, half the time will return seven segment for one switch, and half the time will return the seven seg output for the other |\n| **`seven_segment.sv`** | Uses combinational logic to determine which seven segment cathodes to turn on, and which to turn off. |\n| **`led_summation.sv`** | Adds together the collected 4-bits of the two switches and returns their binary equivalent as a 5-bit array |\n\n: **Module Functions** {#tbl-modules}\n\nSome important notes about this layout is that the clock is used to determine a state, S0 or S1, which will determine which display is turned on at any given time. In state **S0**, the system would rely on one switch (s1); in this case, `seven_segment` would be called on for that switch only. The system would then turn a corresponding anode on and off using the PNP resister; in this case, since its a PNP resistor, it needed to be turn \"off\" to turn the system on. In state **S1**, the output of `seven_segment` instead relies on the output of switch s2, and will return the opposite output for the anode display. The logic for this can be found in @tbl-statelogic, the following can be said for each of the states.\n\n\n| state | Switch Used for Seven Segment Logic | Anode 1 | Anode 2 | \n|-------|-------------------------------------|---------|---------|\n| **S0** | s1 | 0 (i.e. Display 1 is on) | 1 (Display 2 is off) |\n| **S1** | s2 | 1 | 0 |\n| **X**  | an error has occured, s = 0 | 1 | 1 |\n\n: **State Logic** {#tbl-statelogic}\n\nOnce these modules were all written, they were compiled, checked for errors, and finally put into Questa for testing.\n\n#### Testing\n\nTwo test benches were written for this lab. The first one checks to make sure that `lab02.sv` as a whole can run, and correctly lights up the LEDs as seen fit. Because direct control of the counter can't be gotten when calling on this upper-level module, the testbench instead only checked that at least one of the outputs of the potential seven segment outputs was correct. The second was used to determine that the proper segment was lit up when the correct switch/state was entered into the dual_seven_seg module. In the case of both, a testvector file was composed and assembled using Python to make sure that all possible options were checked for and confirmed. This Python program can be found in Github, at [`this_file.py`](https://github.com/zoe-worrall/e155_labs/blob/main/this_file.py)\n\n##### Testbench lab02_tb\n\nIn order to make sure that all cases were covered, the test vectors were created by running a for-loop to generate a series of switches; each of these switch combinations was used to generate a potential segment output, and finally a summation-vector was made that could be called on to correctly add the sum of both segments to the end. The python file then printed a series of strings of the form\n\n`switch1_switch2_segment1_segment2_summed led values`\n\nBy running two for loops to cycle through all potential switch values, it can be confirmed that all potential values within the system have been reached. Within the test bench itself, the system uses an or expression to confirm that at least one of the segment outputs is equal to the segment output of the system. It also confirms that the led_summation is working as anticipated.\n\nUsing this testbench, confirmation of the functionality of the whole of lab02 was completed, as all tests could be run without failure (@fig-testbenchlab02)\n\n![Output of Running lab02_tb.sv in Questa](images/lab2_QuestaOutLab02.png){#fig-testbenchlab02 width=50%}\n\n\n##### Testbench dual_seven_seg_tb\n\nIn order to make sure that all cases were covered, the test vectors for this testbench were created by running a for-loop to generate a series of switches, similar to lab02 testbench. However, these nested for-loops were nested in one final for-loop, which acertained which state the system was in; each of these switch combinations was used to generate a potential segment output, and finally a summation-vector was made that could be called on to correctly add the sum of both segments to the end. The python file then printed a series of strings of the form\n\n`switch1_switch2_state_segment_anode1_anode2`\n\nBy running two for loops to cycle through all potential switch values, it can be confirmed that all potential values within the system have been reached. Within the test bench itself, the system uses an or expression to confirm that at least one of the segment outputs is equal to the segment output of the system. It also confirms that the led_summation is working as anticipated.\n\nUsing this testbench, confirmation of the functionality of the whole of lab02 was completed, as all tests could be run without failure (@fig-testbenchMultiplex)\n\n![Output of Running lab02_tb.sv in Questa](images/lab2_QuestaOutSevenSegTb.png){#fig-testbenchMultiplex width=50%}\n\nWith this confirmation that the logic of the modules were working, it was possible to then move on to physical implementation of the program on the actual FPGA and hardware.\n\n### Design: Seven Segment Display\n\nThe design was developed based on work from Lab 1. The same seven segmenet module was used within a double multiplexer, which used the clock to switch back and forth between powering the two common anodes of the dual display. Using multiplexing, the two values were displayed.\n\nBecause the final system was multiplexing between two segments, this means that the common anode of a given seven-segment LED must be able to be turned OFF. In the original design for the seven-segment display, the common anode had been plugged in directly to the +3.3V of the development board, and in this way circumvented being powered by the FPGA board (which can not supply more than 0.8 mA at a given time). Attempting to power the seven-segment display directly won't work (as will be explained in @sec-calculations) unless you want to short your board. Resultantly, two PNP 2N3906 transistors were used, wherein the FPGA was used only to turn the transistor on and off, allowing the +3.3V coming from the Development board to flow within the circuit (once again, circumventing using the FPGA as a current supply directly).\n\n#### Calculations: PNP Transistor Circuit{#sec-calculations}\nBeforehand, to ensure proper requisites were met for powering the seven segment display that everything was properly set up for the PNP transistor and the resistors in the circuit, some simple mathematial calculations were performed to ensure proper voltage and current was kept throughout the circuit.\n\nThe transistors we were using were [2N3906 PNP transistors](https://hmc-e155.github.io/assets/doc/2N3906-D.pdf). PNP transistors have three terminals; the base, which controls if the PNP is on or off, the emitter, where electrons come from, and the collector, where the electrons go (@fig-pnptransis). For PNP transistors to work, there must be enough of a voltage gap between the base voltage and the emitter voltage that current can flow from one too the other; when this happens, current can also flow from the emitter to the collector, with the assumption that the voltages being used do not break or short out the transistor itself.\n\n![PNP Transistor Diagram](images/pnp_transistor.png){#fig-pnptransis width=40%}\n\nTo determine these limitations, it was necessary to know three things: the voltage drop across the collector to the emitter (V_CE), the voltage drop across the base to the emitter (V_BE), and finally the maximum current draw that would flow from the collector to the emitter (I_CE).\n\nAccording to the PNP's datasheet, on average the V_CE drop is 3.3 V. The value of V_BE is, as with most transistors, assumed to be about 0.7 V. To start out with, the primary goal of this circuit should be to power the FPGA board without shorting it by sending too much current through it via the emitter to base connection on the board. Resultantly, a resistor should be placed between the FPGA's output GPIO pin and the base of the transistor such that the current is less than the maximum possible current that can be sent into the board. This can be configured according to the datatable for the GPIO pins (@fig-fpga_gpio_pins), where it can be seen that the maximum current that should be sent into or out of the FPGA board is 0.8 mA. The maximum current we will be sending into our board is based on the resistor values that we install for the diodes with the dual segment display. With the assumption that we use the same 220 Ohm resistors we were originally using, the current draw through each of these resistors will be slightly reduced from what was considered in Lab 1.\n\n![GPIO Current Draw Pins for FPGA Board](images/fpga_maxin_maxout.png){#fig-fpga_gpio_pins width=100%}\n\nFirst and foremost, I intend to power the LED's using 3.3V, but these volts will first travel across the transistor, which is dependent on the current I_C traveling through the circuit. Assuming that this is relatively negligable (see Figure 15 on the PNP Datasheet, to observe that most of the Voltage removed for current lying under 60 mA is close to 0.1 V), and knowing that per diode line there will be an anticipated voltage drop of 2.1 V, that means that any one resistor will need to remove 3.3 - 2.1 Volts, or 1.2 V, from the circuit. When traveling across a 220 Ohm resistor, this will result in a current of roughly 5.45 mA. Assuming that we'll be powering seven segments at any one time (the maximum amount possible), this means that the total current draw that can be expected is 38.18 mA. We can then compute the necessary amount of current, I_B, that will need to travel through the base in order to turn this circuit on. Using the gain terms found in the datasheet (@fig-gaincurrent), it can be seen that for a given current I_C = 40 mA, the gain will be roughly 50 around room temperature. \n\n![Table of the Voltage Drop V_CE and Gain of PNP Transistor](images/pnp_gain.png){#fig-gaincurrent width=100%}\n\nThis means that the corresponding current I_B for the circuit is 38.18 mA/50 = 0.69 mA. In the case of I_B, there is only one resistor between it and the +3.3V power supply; in addition, the transistor will remove V_BE from the circuit, which means that the resistence of this component must be roughly (3.3V - 0.7V)/(0.69 mA), or 3.745 kOhms. In my final circuit design, I used a 3.3 kOhm resistor as it was the closest one I could find in lab, meaning that the final current draw was likely 0.07 mA, which still falls far under the maximum current that the FPGA board can use.\n\n@tbl-fin_calc below shows all the calculated voltages, currents, and resistances used for this circuit.\n\n| Component/Measurement | Calculated Value |\n|-----------------------|------------------|\n| V_CE (voltage from Emitter to Collector)    | 3.3 V    |\n| V_BE (voltage drop from Base to Emitter)    | 0.7 V    |\n| I_C (anticipated current drawn from the emitter to the collector)    | 38.18 mA   |\n| h_FE (DC gain relative to current I_C)    | 55   |\n| I_B (current necessary to turn on the PNP transistor)    | 0.69 mA   |\n| R_transistor (current-limiting resistor between the FPGA and the emitter)    | 3.745 kOhms    |\n\n: **Calculated Component Values** {#tbl-fin_calc}\n\n#### Hardware Setup of Seven Segment Display\n\nSimilar to the [previous Lab](/portfolio_git_repo/zoe-worrall-website/projects/e-155_website/labs/lab1), in this lab each individual seven segment display was connected to a common anode (in this case, the output emitter of a PNP transistor). Each of the cathodes was attached via a resistor to the FPGA output pins onboard the [E155 Breadboard Adapter](https://hmc-e155.github.io/assets/doc/E155%20Breadboard%20Adapter%20Schematic.pdf). In similar fashion to what was described in Lab 1, setting the board up such that each cathode has a resistor allows for each of the diodes to be equally bright, as they all start at the same voltage drop and resultantly will draw the same current if powered (current being directly correlated with their lumosity).\n\nThe pin numbers, besides pin D, were kept the same as Lab 1 (it was later realized that the print of Pin 18 looks extremely similar to Pin 10, and that was why the system wasn't working when Pin 10 was being powered; the system now works where Pin D is assigned to Pin 18). There are only three fundamental differences: two common anodes, two sets of A-G pins, and the presence of transistors within the circuit.\n\n##### Common Anodes\n\nThe dual display had two common anodes, which were how control over multiplexing was done. At any one time, there were two \"states\" assumed to exist within the system; in one state, the display on the right was turned on (S0), and in the other, the display on the left (S1)\n\n##### Two Sets of Pins\n\nSince only a single module calculating the seven-segmenet display could be used at any one time, the corresponding pins of each cathode were connected to each other (i.e. A1 was connected to A2, B1 to B2, etc.). This meant that if both the common anodes had been lit up at the same time, both displays would show the same value, rather than only one lighting up.\n\n##### Transistors\n\nThe common anodes were controlled via the PNP transistors. In doing so, it was possible to only light up one display at a time, while only performing one calculation of the seven segment display.\n\nThe final schematic of this system can be seen in @fig-sevenSegSchem\n\n![Dual Seven Segment LED Matrix Schematic](images/lab2_scheme_sevenseg.png){#fig-sevenSegSchem width=100%}\n\n### Design: DIP Switch Pins\n\nThere are two DIP switches used in this lab, one that is breadboarded and controls the output of the rightmost display, and one that is soldered onto the E155 board and is used the left-most display. The same logic as the previous labs applies to both DIP switches, where the rightmost pin is used as the lowest-order bit. The on-board DIP switches did not require any additional resistrs, as there is an integrated pull-up resistor as detailed on the [\"E155 FA Development Board Datasheet\"](https://pages.hmc.edu/brake/class/e155/fa23/assets/doc/E155%20Development%20Board%20Schematic.pdf). However, the readboarded switches did not have these pull-up resistors already; after reviewing the [78B04ST DIP switch datasheet](https://peerlesselectronics.com/media//erp_files/files/78B04ST.pdf), it was found that the switches work at 3.3V, so no voltage adjustment was necessary. However, four additional 220 Ohm resistors were added to the switch board between the switch and ground to create a pull-up resistor, and then four FPGA GPIO pins were connected into the anodes of each DIP switch. The final connections for these connections, as well as the variables to which they were assigned can be found in @fig-switches\n\n![4-Pin DIP Switch Schematic](images/lab2_scheme_switches.png){#fig-switches width=100%}\n\n#### Design: LED Counter\n\nThe final necessity for this lab is a set of five LEDs to display the binary summation of the two switches. For this project, a [SSA-LXB10TW-GF-LP](https://www.mouser.com/ProductDetail/Lumex/SSA-LXB10IW-GF-LP?qs=52yRZiL3nOrtt4bQY8D69g%3D%3D) was used. Since the LED's require a 2.1 voltage drop across them, very similar to the LEDs inside the seven segment array, 220 Ohm resistors were used for each LED while they drained to ground. This resulted in the corresponding schematic (@fig-leds). Only 5 of the 10 LED-Diode Display were used.\n\n![10-LED Display Schematic](images/lab2_scheme_leds.png){#fig-leds width=100%}\n\n#### Design: Overall\n\nThe final circuit is mainly controlled by the FPGA, except for the 3.3V that supplies the current for the seven segment voltage. The final circuit can be seen in @fig-schematic.\n\n![Overall Schematic](images/lab2_schematic.png){#fig-schematic width=100%}\n\n### Results and Discussion\n\nAs shown in the two test bench simulations above, the program is able to receive the desired outputs. When observed in the lab, with hardware, the correct behavior can be similarly observed.\n\nIf future development desired, additional phases or multiplexed digits could be added quite easily, especially if scaled by 2, as the multiplexing is controlled by each digit of counter; hypothetically, if an additional two numbers needed to be added, two more switches could be set up on the breadboard in similar fashion, the counter could be assigned based on the state of two bits within counter (for a total of four states, rather than two), and the multiplexing would occur via four PNP transistors that move to four common anodes. Scaling is extremely possible with this design.\n\n### Conclusion\n\nIn conclusion, all of the program works properly in simulation and in hardware, and can be confirmed both visually and with the aid of a test bench. The program is able to multiplex successfully without having the two LEDs bleed over, and all digits are equally lit for each segment, and proper calculations for the PNP transistor can be found above.\n\nI spent a total of 13.5 hours working on this lab, with roughly four of them spent on the lab writeup if including the planning of the modules and compiling all of the necessary diagrams."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"lab2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.45","theme":"jolla","font-family":"Times New Roman","smooth-scroll":true,"grid":{"sidebar-width":"0px","body-width":"1000px","margin-width":"250px"},"title":"Lab 2 Writeup","author":"Zoe Worrall  - zworrall@g.hmc.edu","image":"images/lab2_sim.png","date":"September 9, 2024","categories":["labreport"],"other-links":[{"text":"E155 FA Development Board","href":"https://pages.hmc.edu/brake/class/e155/fa23/assets/doc/E155%20Development%20Board%20Schematic.pdf"},{"text":"E155 Breadboard Adapter v4","href":"https://hmc-e155.github.io/assets/doc/E155%20Breadboard%20Adapter%20Schematic.pdf"},{"text":"Lab 2 Github Files","href":"https://github.com/zoe-worrall/e155_labs/tree/main/fpga/radiant_project/lab02"},{"text":"PNP Transistor Datasheet","href":"https://hmc-e155.github.io/assets/doc/2N3906-D.pdf"}]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}